/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.40.0
 * Product:       sht4x
 * Model-Version: 2.1.1
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sht4x_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SHT4X_Tests) {
    void setup() {
        sht4x_init(0x44);
    }
};

TEST (SHT4X_Tests, test_measure_high_precision_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error =
        sht4x_measure_high_precision_ticks(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "measure_high_precision_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_measure_medium_precision_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_measure_medium_precision_ticks(&temperature_ticks,
                                                       &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "measure_medium_precision_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_measure_lowest_precision_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_measure_lowest_precision_ticks(&temperature_ticks,
                                                       &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "measure_lowest_precision_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_highest_heater_power_long_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_highest_heater_power_long_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_highest_heater_power_long_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_highest_heater_power_short_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_highest_heater_power_short_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_highest_heater_power_short_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_medium_heater_power_long_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_medium_heater_power_long_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_medium_heater_power_long_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_medium_heater_power_short_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_medium_heater_power_short_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_medium_heater_power_short_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_lowest_heater_power_long_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_lowest_heater_power_long_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_lowest_heater_power_long_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_activate_lowest_heater_power_short_ticks1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht4x_activate_lowest_heater_power_short_ticks(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "activate_lowest_heater_power_short_ticks");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, test_serial_number1) {
    int16_t local_error = 0;
    uint32_t serial_number = 0;
    local_error = sht4x_serial_number(&serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "serial_number");
    printf("serial_number: %u\n", serial_number);
}

TEST (SHT4X_Tests, test_soft_reset1) {
    int16_t local_error = 0;
    local_error = sht4x_soft_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "soft_reset");
}
