/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-12-g6411a7e
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sht4x_i2c.h"
#include <inttypes.h>
#include <stdio.h>

// TODO: DRIVER_GENERATOR Remove commands which shouldn't be tested
// TODO: DRIVER_GENERATOR Adjust setup and teardown
// TODO: DRIVER_GENERATOR Adjust all tests such that pre- and post conditions
// are meet

TEST_GROUP (SHT4X_Tests) {
    void setup() {
        sensirion_i2c_hal_init();

        // Select MUX 1 channel 1 (TODO: DRIVER_GENERATOR choose correct mux
        // position)
        int16_t error = sensirion_i2c_mux_set_single_channel(0x71, 1);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
    }

    void teardown() {

        sensirion_i2c_hal_free();
    }
};

TEST (SHT4X_Tests, SHT4X_Test_measure_high_precision_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error =
        sht4x_measure_high_precision_ticks(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error, "sht4x_measure_high_precision_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_measure_medium_precision_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_measure_medium_precision_ticks(&temperature_ticks,
                                                 &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error, "sht4x_measure_medium_precision_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_measure_lowest_precision_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_measure_lowest_precision_ticks(&temperature_ticks,
                                                 &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error, "sht4x_measure_lowest_precision_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_highest_heater_power_long_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_highest_heater_power_long_ticks(&temperature_ticks,
                                                           &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_highest_heater_power_long_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_highest_heater_power_short_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_highest_heater_power_short_ticks(&temperature_ticks,
                                                            &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_highest_heater_power_short_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_medium_heater_power_long_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_medium_heater_power_long_ticks(&temperature_ticks,
                                                          &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_medium_heater_power_long_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_medium_heater_power_short_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_medium_heater_power_short_ticks(&temperature_ticks,
                                                           &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_medium_heater_power_short_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_lowest_heater_power_long_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_lowest_heater_power_long_ticks(&temperature_ticks,
                                                          &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_lowest_heater_power_long_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_activate_lowest_heater_power_short_ticks) {
    int16_t error;
    uint16_t temperature_ticks;
    uint16_t humidity_ticks;
    error = sht4x_activate_lowest_heater_power_short_ticks(&temperature_ticks,
                                                           &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(error,
                          "sht4x_activate_lowest_heater_power_short_ticks");
    printf("Temperature_ticks: %u\n", temperature_ticks);
    printf("Humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT4X_Tests, SHT4X_Test_serial_number) {
    int16_t error;
    uint32_t serial_number;
    error = sht4x_serial_number(&serial_number);
    CHECK_EQUAL_ZERO_TEXT(error, "sht4x_serial_number");
    printf("Serial_number: %u\n", serial_number);
}

TEST (SHT4X_Tests, SHT4X_Test_soft_reset) {
    int16_t error;
    error = sht4x_soft_reset();
    CHECK_EQUAL_ZERO_TEXT(error, "sht4x_soft_reset");
}
